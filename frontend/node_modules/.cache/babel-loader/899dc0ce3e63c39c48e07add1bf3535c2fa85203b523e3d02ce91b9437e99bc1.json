{"ast":null,"code":"var _jsxFileName = \"C:\\\\Kryptosphere\\\\2024\\\\Hack-Laussane\\\\ZkBox\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messageInput, setMessageInput] = useState('');\n  const [response, setResponse] = useState('');\n  const [status, setStatus] = useState('');\n  const [lastMessage, setLastMessage] = useState('');\n\n  // Fonction pour envoyer un message à l'Arduino\n  const sendMessage = async e => {\n    e.preventDefault();\n    if (!messageInput) return;\n    try {\n      const res = await fetch('http://localhost:3000/send', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: messageInput\n        })\n      });\n      const data = await res.text();\n      setResponse(data);\n      setMessageInput(''); // Réinitialiser le champ de saisie\n    } catch (error) {\n      console.error('Erreur:', error);\n      setResponse('Erreur lors de l\\'envoi.');\n    }\n  };\n\n  // Fonction pour récupérer l'état du coffre\n  const fetchStatus = async () => {\n    try {\n      const res = await fetch('http://localhost:3000/status');\n      const data = await res.text();\n      setStatus('État du coffre: ' + data);\n    } catch (error) {\n      console.error('Erreur:', error);\n      setStatus('Erreur lors de la récupération de l\\'état.');\n    }\n  };\n\n  // Fonction pour récupérer le dernier message de l'Arduino\n  const fetchLastMessage = async () => {\n    try {\n      const res = await fetch('http://localhost:3000/last-message');\n      const data = await res.text();\n      setLastMessage('Dernier message Arduino: ' + data);\n    } catch (error) {\n      console.error('Erreur:', error);\n      setLastMessage('Aucun message reçu.');\n    }\n  };\n\n  // Utiliser useEffect pour appeler fetchStatus et fetchLastMessage toutes les 2 secondes\n  useEffect(() => {\n    const intervalStatus = setInterval(fetchStatus, 2000);\n    const intervalLastMessage = setInterval(fetchLastMessage, 2000);\n\n    // Nettoyer les intervalles lors du démontage du composant\n    return () => {\n      clearInterval(intervalStatus);\n      clearInterval(intervalLastMessage);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Contr\\xF4ler le Coffre Arduino\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Entrez votre message\",\n        value: messageInput,\n        onChange: e => setMessageInput(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Envoyer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"response\",\n      children: response\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"lastMessage\",\n      children: lastMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"/Vftyh9VABpdGhrwX8eVO5hJJ1g=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","messageInput","setMessageInput","response","setResponse","status","setStatus","lastMessage","setLastMessage","sendMessage","e","preventDefault","res","fetch","method","headers","body","JSON","stringify","message","data","text","error","console","fetchStatus","fetchLastMessage","intervalStatus","setInterval","intervalLastMessage","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","required","id","_c","$RefreshReg$"],"sources":["C:/Kryptosphere/2024/Hack-Laussane/ZkBox/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction App() {\n    const [messageInput, setMessageInput] = useState('');\n    const [response, setResponse] = useState('');\n    const [status, setStatus] = useState('');\n    const [lastMessage, setLastMessage] = useState('');\n\n    // Fonction pour envoyer un message à l'Arduino\n    const sendMessage = async (e) => {\n        e.preventDefault();\n        if (!messageInput) return;\n\n        try {\n            const res = await fetch('http://localhost:3000/send', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ message: messageInput })\n            });\n            const data = await res.text();\n            setResponse(data);\n            setMessageInput(''); // Réinitialiser le champ de saisie\n        } catch (error) {\n            console.error('Erreur:', error);\n            setResponse('Erreur lors de l\\'envoi.');\n        }\n    };\n\n    // Fonction pour récupérer l'état du coffre\n    const fetchStatus = async () => {\n        try {\n            const res = await fetch('http://localhost:3000/status');\n            const data = await res.text();\n            setStatus('État du coffre: ' + data);\n        } catch (error) {\n            console.error('Erreur:', error);\n            setStatus('Erreur lors de la récupération de l\\'état.');\n        }\n    };\n\n    // Fonction pour récupérer le dernier message de l'Arduino\n    const fetchLastMessage = async () => {\n        try {\n            const res = await fetch('http://localhost:3000/last-message');\n            const data = await res.text();\n            setLastMessage('Dernier message Arduino: ' + data);\n        } catch (error) {\n            console.error('Erreur:', error);\n            setLastMessage('Aucun message reçu.');\n        }\n    };\n\n    // Utiliser useEffect pour appeler fetchStatus et fetchLastMessage toutes les 2 secondes\n    useEffect(() => {\n        const intervalStatus = setInterval(fetchStatus, 2000);\n        const intervalLastMessage = setInterval(fetchLastMessage, 2000);\n\n        // Nettoyer les intervalles lors du démontage du composant\n        return () => {\n            clearInterval(intervalStatus);\n            clearInterval(intervalLastMessage);\n        };\n    }, []);\n\n    return (\n        <div>\n            <h1>Contrôler le Coffre Arduino</h1>\n            <form onSubmit={sendMessage}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Entrez votre message\"\n                    value={messageInput}\n                    onChange={(e) => setMessageInput(e.target.value)}\n                    required\n                />\n                <button type=\"submit\">Envoyer</button>\n            </form>\n            <div id=\"response\">{response}</div>\n            <div id=\"status\">{status}</div>\n            <div id=\"lastMessage\">{lastMessage}</div>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}