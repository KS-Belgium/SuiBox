{"ast":null,"code":"var _jsxFileName = \"C:\\\\Kryptosphere\\\\2024\\\\Hack-Laussane\\\\ZkBox\\\\frontend\\\\src\\\\ArduinoController.js\",\n  _s = $RefreshSig$();\n// src/ArduinoController.js\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ArduinoController = () => {\n  _s();\n  const [message, setMessage] = useState('');\n  const [response, setResponse] = useState('');\n  const [status, setStatus] = useState('');\n  const handleSendMessage = async e => {\n    e.preventDefault();\n    try {\n      const res = await axios.post('http://localhost:3000/send', {\n        message\n      }); // Appel au port 3000\n      setResponse(res.data);\n    } catch (error) {\n      console.error('Erreur:', error);\n      setResponse('Erreur lors de l\\'envoi du message.');\n    }\n  };\n  const fetchStatus = async () => {\n    try {\n      const res = await axios.get('http://localhost:3000/status'); // Appel au port 3000\n      setStatus(res.data);\n    } catch (error) {\n      console.error('Erreur:', error);\n      setStatus('Erreur lors de la récupération de l\\'état.');\n    }\n  };\n  useEffect(() => {\n    const interval = setInterval(fetchStatus, 2000);\n    return () => clearInterval(interval); // Nettoyer l'intervalle à la désinscription\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Contr\\xF4ler le Coffre Arduino\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        placeholder: \"Entrez votre message\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Envoyer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"response\",\n      children: response\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"status\",\n      children: [\"\\xC9tat du coffre: \", status]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n_s(ArduinoController, \"/b+iNrAxEB/7h2JX11JNot/okzo=\");\n_c = ArduinoController;\nexport default ArduinoController;\nvar _c;\n$RefreshReg$(_c, \"ArduinoController\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","ArduinoController","_s","message","setMessage","response","setResponse","status","setStatus","handleSendMessage","e","preventDefault","res","post","data","error","console","fetchStatus","get","interval","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","placeholder","required","id","_c","$RefreshReg$"],"sources":["C:/Kryptosphere/2024/Hack-Laussane/ZkBox/frontend/src/ArduinoController.js"],"sourcesContent":["// src/ArduinoController.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst ArduinoController = () => {\r\n    const [message, setMessage] = useState('');\r\n    const [response, setResponse] = useState('');\r\n    const [status, setStatus] = useState('');\r\n\r\n    const handleSendMessage = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            const res = await axios.post('http://localhost:3000/send', { message }); // Appel au port 3000\r\n            setResponse(res.data);\r\n        } catch (error) {\r\n            console.error('Erreur:', error);\r\n            setResponse('Erreur lors de l\\'envoi du message.');\r\n        }\r\n    };\r\n\r\n    const fetchStatus = async () => {\r\n        try {\r\n            const res = await axios.get('http://localhost:3000/status'); // Appel au port 3000\r\n            setStatus(res.data);\r\n        } catch (error) {\r\n            console.error('Erreur:', error);\r\n            setStatus('Erreur lors de la récupération de l\\'état.');\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(fetchStatus, 2000);\r\n        return () => clearInterval(interval); // Nettoyer l'intervalle à la désinscription\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Contrôler le Coffre Arduino</h1>\r\n            <form onSubmit={handleSendMessage}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={message}\r\n                    onChange={(e) => setMessage(e.target.value)}\r\n                    placeholder=\"Entrez votre message\"\r\n                    required\r\n                />\r\n                <button type=\"submit\">Envoyer</button>\r\n            </form>\r\n            <div id=\"response\">{response}</div>\r\n            <div id=\"status\">État du coffre: {status}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ArduinoController;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}